
gen0 = ['all', 'Founder', 'F1', 'FounderBC1','BC1','FounderBC2','BC2','IC','offspring','Araucana','WLfounders']
gens2 = ['all','offspring','FounderBC1','BC1','FounderBC2','BC2','IC']

wildcard_constraints:
    gen0  = "|".join(gen0)


rule prep_geno:
    input: 
        script = "SCRIPTS/prep_geno.r",
        rdata = "DATA/geno/2024-04-19_IMAGEcomplete_CR_SCM_GGA6_Ref0_Alt1.RData",
        pheno = "DATA/pheno/Phenotypes_Final.csv"
    output:
        vcf = "INTERMEDIATE/ori/IMAGE.vcf",
    log: "LOGS/prep/geno.log"
    benchmark: "LOGS/prep/geno.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (Rscript --vanilla {input.script} {input.rdata} {input.pheno} {output.vcf}) &> {log}
        """

rule bfile_ori_QC:
    input:
        vcf = "INTERMEDIATE/ori/IMAGE.vcf",
    output:
        bed = "INTERMEDIATE/ori/IMAGE_QC.bed",
        fam = "INTERMEDIATE/ori/IMAGE_QC.fam",
        bim = "INTERMEDIATE/ori/IMAGE_QC.bim",
    log: "LOGS/bfile/ori_QC.log"
    benchmark: "LOGS/bfile/ori_QC.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    params:
        qc = "INTERMEDIATE/ori/IMAGE_QC" 
    shell:
        """
        (
        plink --vcf {input.vcf} --chr-set 40 --allow-extra-chr --mind 0.15 --geno 0.15 \
        --make-bed --out {params.qc}

        awk '{{$1="IM"; print}}' {output.fam} > tmp1.txt
        mv tmp1.txt {output.fam}
        ) &> {log}
        """

rule MAF_gen:
    input:
        bed = "INTERMEDIATE/ori/IMAGE_QC.bed",
        fam = "INTERMEDIATE/ori/IMAGE_QC.fam",
        bim = "INTERMEDIATE/ori/IMAGE_QC.bim",
        id = "INTERMEDIATE/IDlist/IDlist_{gen}.txt"
    output:
        res = "RESULTS/MAF/IMAGE_QC/{gen}.frq",
    log: "LOGS/MAF/IMAGE_QC/{gen}.log"
    benchmark: "LOGS/MAF/IMAGE_QC/{gen}.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    params:
        qc = "INTERMEDIATE/ori/IMAGE_QC",
        out = "RESULTS/MAF/IMAGE_QC/{gen}"
    shell:
        """
        (
        plink --bfile {params.qc} --keep {input.id} --chr-set 40 --allow-extra-chr --freq --out {params.out}
        ) &> {log}
        """

rule plot_MAF:
    input:
        script = "SCRIPTS/plot_maf.r",
        frq = expand("RESULTS/MAF/IMAGE_QC/{gen}.frq", gen=gen0)
    output:
        plot = "PLOTS/MAF/IMAGE_QC.pdf",
    log: "LOGS/plot/MAF/IMAGE_QC.log"
    benchmark: "LOGS/plot/MAF/IMAGE_QC.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (
        Rscript --vanilla {input.script} {input.frq} {output.plot}
        ) &> {log}
        """



rule get_ID_gen:
    input:
        rdata = "DATA/geno/2024-04-19_IMAGEcomplete_CR_SCM_GGA6_Ref0_Alt1.RData",
        script = "SCRIPTS/get_ID_gen.r"
    output:
        out = "INTERMEDIATE/IDlist/IDlist_{gen0}.txt",
    log: "LOGS/get_ID/{gen0}.log"
    benchmark: "LOGS/get_ID/{gen0}.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (R < {input.script} --vanilla --args {input.rdata} {output.out} {wildcards.gen0}) &> {log}
        """



rule prep_pheno:
    input:
        rdata = "DATA/geno/2024-04-19_IMAGEcomplete_CR_SCM_GGA6_Ref0_Alt1.RData",
        pheno = "DATA/pheno/Phenotypes_Final.csv",
        script = "SCRIPTS/prep_pheno.r",
    output:
        out = "DATA/pheno/{pheno}.txt",
    log: "LOGS/prep/pheno/{pheno}.log"
    benchmark: "LOGS/prep/pheno/{pheno}.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (R < {input.script} --vanilla --args {input.rdata} {input.pheno} {output.out} {wildcards.pheno}) &> {log}
        """




rule QC_impute:
    input: 
        vcf = "Snakemake_Liftover_Impute/Output/Imputed/bcftools_lifted_imputed_gt.vcf.gz",
    output:
        out = protected("Snakemake_Liftover_Impute/Output/Imputed/bcftools_lifted_imputed_gt_DR2.vcf.gz"),
        csi = protected("Snakemake_Liftover_Impute/Output/Imputed/bcftools_lifted_imputed_gt_DR2.vcf.gz.csi")
    shadow: "shallow"
    log: "LOGS/QC_impute.log"
    benchmark: "LOGS/QC_impute.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 10
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *10* 1000,
        time = lambda wildcards, attempt: int(attempt) *3* 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (   set +o pipefail
            bcftools view -i 'INFO/DR2>=0.8' {input.vcf} -Oz -o {output.out} --threads {threads}
            bcftools index -f {output.out} --threads {threads}
            ) &> {log} || true
        """


rule bfile_beagle_impute:
    input: 
        vcf = "Snakemake_Liftover_Impute/Output/Imputed/bcftools_lifted_imputed_gt_DR2.vcf.gz",
    output:
        bim = ("INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bim"),
        bed = ("INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bed"),
        fam = ("INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.fam")
    shadow: "shallow"
    log: "LOGS/bfile/beagle_impute.log"
    benchmark: "LOGS/bfile/beagle_impute.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 5
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *10* 1000,
        time = lambda wildcards, attempt: int(attempt) *3* 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    params:
        n = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC"
    shell:
        """
        (   set +o pipefail
            plink --vcf {input.vcf} --out {params.n} --make-bed \
            --allow-extra-chr --chr-set 40 --threads {threads}

            awk '{{$1="IM"; print}}' {output.fam} > tmp1.txt
            mv tmp1.txt {output.fam}
            ) &> {log}
        """

rule MAFimp_gen:
    input:
        bim = ("INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bim"),
        bed = ("INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bed"),
        fam = ("INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.fam"),
        id = "INTERMEDIATE/IDlist/IDlist_{gen}.txt"
    output:
        res = "RESULTS/MAF/impute_QC/{gen}.frq",
    log: "LOGS/MAF/impute_QC/{gen}.log"
    benchmark: "LOGS/MAF/impute_QC/{gen}.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    params:
        qc = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC",
        out = "RESULTS/MAF/impute_QC/{gen}"
    shell:
        """
        (
        plink --bfile {params.qc} --keep {input.id} --chr-set 40 --allow-extra-chr --freq --out {params.out}
        ) &> {log}
        """

rule plot_MAFimp:
    input:
        script = "SCRIPTS/plot_maf.r",
        frq = expand("RESULTS/MAF/impute_QC/{gen}.frq", gen=gens2)
    output:
        plot = "PLOTS/MAF/impute_QC.pdf",
    log: "LOGS/plot/MAF/impute_QC.log"
    benchmark: "LOGS/plot/MAF/impute_QC.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (
        Rscript --vanilla {input.script} {input.frq} {output.plot}
        ) &> {log}
        """


rule PCA_impute:
    input:
        bim = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bim",
        bed = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bed",
        fam = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.fam",
    output:
        eivec = "RESULTS/PCA/impute/bcftools_lifted_imputed_gt_QC_pruned.eigenvec",
        eival = "RESULTS/PCA/impute/bcftools_lifted_imputed_gt_QC_pruned.eigenval",
    log: "LOGS/PCA/impute.log"  
    benchmark: "LOGS/PCA/impute.bench" 
    conda: "IMAGE_SCM"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *30* 1000,
        time = lambda wildcards, attempt: int(attempt) *3* 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    params:
        arg = "--allow-extra-chr --chr-set 40 --set-missing-var-ids @:#",
        name = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC",
        out = "RESULTS/PCA/impute/bcftools_lifted_imputed_gt_QC"
    shell:
        """
        set +o pipefail
        (plink --bfile {params.name} {params.arg} --indep-pairwise 100 50 0.3 --threads {threads} --out {params.out}
          plink --bfile {params.name} {params.arg} --extract {params.out}.prune.in --pca 5 --threads {threads} --out {params.out}_pruned
        ) &> {log} || true
        """



