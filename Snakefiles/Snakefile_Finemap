import pandas as pd
import re

checkpoint get_QTLs:
    input:
        script="SCRIPTS/get_QTLs.r",
        fgwa = "RESULTS/gcta/fastGWA/{gen}/{pheno}_{gen}.fastGWA",
        metagwa = "RESULTS/metaGWAS/ENs_all.txt"
    output:
        qtl = "RESULTS/BFMAP/{pheno}/QTLs_{pheno}_{gen}.txt",
    log: "LOGS/BFMAP/get_QTLs/{pheno}_{gen}.log"  
    benchmark: "LOGS/BFMAP/get_QTLs/{pheno}_{gen}.bench" 
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *10* 1000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    params:
        maxlength = 11000000
    shell:
        """
        (Rscript --vanilla {input.script} {input.fgwa} {input.metagwa} {output.qtl} {params.maxlength} ) &> {log}
        """
        


def get_fs_files(qtl_file, pheno, gen):
    qtl_file = qtl_file.strip()
    df = pd.read_csv(qtl_file, sep="\t")

    fs_files = []
    for _, row in df.iterrows():
        region = f"{int(row['CHR'])}:{int(row['exdst'])}-{int(row['exded'])}"
        path = f"RESULTS/BFMAP/{pheno}/FS/{region}_{pheno}_{gen}.csv"
        fs_files.append(path.replace(" ", ""))
    return fs_files

def get_vc_files(qtl_file, pheno, gen):
    qtl_file = qtl_file.strip()
    df = pd.read_csv(qtl_file, sep="\t")

    vc_files = []
    for _, row in df.iterrows():
        region = f"{int(row['CHR'])}:{int(row['exdst'])}-{int(row['exded'])}"
        path = f"RESULTS/BFMAP/{pheno}/VC/{region}_{pheno}_{gen}.varcomp.csv"
        vc_files.append(path.replace(" ", ""))
    return vc_files


rule BFMAP_grm:
    input:
        appath = "SCRIPTS/packages/bfmap_0.65/bfmap",
        bed = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bed",
        bim = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bim",
        fam = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.fam",
    output:
        bin = "INTERMEDIATE/BFMAP/GRM/allsnp_all.grm.bin",
        indi = "INTERMEDIATE/BFMAP/GRM/allsnp_all.grm.indi",
    log: "LOGS/BFMAP/GRM/allsnp_all.log"  
    benchmark: "LOGS/BFMAP/GRM/allsnp_all.bench" 
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 2
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *250* 1000,
        time = lambda wildcards, attempt: int(attempt) * 2*60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    params:
        bfile = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC",
        out = "INTERMEDIATE/BFMAP/GRM/allsnp_all",
    shadow: "shallow"
    shell:
        """
        (plink --bfile {params.bfile} --maf 0.01 --make-bed --allow-extra-chr --chr-set 40 --out tmp
        echo id > allsnp.csv
        cut -f 2 tmp.bim >> allsnp.csv

        {input.appath} --compute_grm 2 --binary_genotype_file {params.bfile} \
        --snp_info_file allsnp.csv \
        --output_file {params.out}

        ) &> {log}
        """

rule BFMAP_gen:
    input:
        appath = "SCRIPTS/packages/bfmap_0.65/bfmap",
        script = "SCRIPTS/prep_bfmap.r",
        pheno = "DATA/pheno/Phenotypes_Final.csv",
        rdata = "DATA/geno/2024-04-19_IMAGEcomplete_CR_SCM_GGA6_Ref0_Alt1.RData",
        id = "INTERMEDIATE/IDlist/IDlist_{gen}.txt",
        qtl = "RESULTS/BFMAP/{pheno}/QTLs_{pheno}_{gen}.txt",
        bfile = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC.bed",
        bin = "INTERMEDIATE/BFMAP/GRM/allsnp_all.grm.bin",
        indi = "INTERMEDIATE/BFMAP/GRM/allsnp_all.grm.indi",
        covar = "INTERMEDIATE/covar/covar_bfmap.csv",
    output:
        varcomp = "RESULTS/BFMAP/{pheno}/VC/{region}_{pheno}_{gen}.varcomp.csv",
        fsele = protected("RESULTS/BFMAP/{pheno}/FS/{region}_{pheno}_{gen}.csv"),
    log: "LOGS/BFMAP/{pheno}/{region}_{pheno}_{gen}.log"  
    benchmark: "LOGS/BFMAP/{pheno}/{region}_{pheno}_{gen}.bench" 
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 3
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *80* 1000,
        time = lambda wildcards, attempt: int(attempt) *10* 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shadow: "shallow"
    params:
        varcomp = "RESULTS/BFMAP/{pheno}/VC/{region}_{pheno}_{gen}",
        fsele = "RESULTS/BFMAP/{pheno}/FS/{region}_{pheno}_{gen}",
        bfile = "INTERMEDIATE/beagleimpute/bcftools_lifted_imputed_gt_QC",
        grm = "INTERMEDIATE/BFMAP/GRM/allsnp_all",
        chrom = lambda w: w.region.split(':')[0],
        start = lambda w: w.region.split(':')[1].split('-')[0],
        end = lambda w: w.region.split(':')[1].split('-')[1],
    shell:
        """
        (   ## create snpinfo file
            awk -v chrom={params.chrom} -v start={params.start} -v end={params.end} '
                $1 == chrom && $4 >= start && $4 <= end {{print $2}}
            ' {params.bfile}.bim > tmp_{wildcards.region}.txt

            echo id > tmp_{wildcards.region}.csv
            cat tmp_{wildcards.region}.txt >> tmp_{wildcards.region}.csv
            head tmp_{wildcards.region}.csv

            ## write tmp_pheno.csv
            Rscript --vanilla {input.script} {input.pheno} {input.rdata}


            ## make grm (QTL genotypes for h2)
            {input.appath} --compute_grm 2 --binary_genotype_file {params.bfile} \
            --snp_info_file tmp_{wildcards.region}.csv \
            --output_file tmp_{wildcards.region}


            ## run BFMAP

            ## regional QTL h2 estimation
            {input.appath} --varcomp --phenotype_file tmp_pheno.csv --trait_name {wildcards.pheno} \
            --binary_grm_file tmp_{wildcards.region} \
            --covariate_file {input.covar} \
            --output {params.varcomp}

            H2=$(grep "proportion" {output.varcomp} | cut -d',' -f2)
            echo heritability: $H2


            # forward selection for fine mapping
            {input.appath} --phenotype_file tmp_pheno.csv --trait_name {wildcards.pheno} \
            --binary_genotype_file {params.bfile} \
            --snp_info_file tmp_{wildcards.region}.csv \
            --binary_grm_file {params.grm} \
            --heritability $H2 \
            --covariate_file {input.covar} \
            --output {params.fsele}

        ) &> {log} || true
        """



rule plot_BFMAP_pheno_gen:
    input:
        script="SCRIPTS/plot_bfmap.r",
        mlma="RESULTS/gcta/fastGWA/{gen}/{pheno}_{gen}.fastGWA",
        genes = "DATA/geno/ensembl_genes_GRCg6a.txt",
        qtl = "RESULTS/BFMAP/{pheno}/QTLs_{pheno}_{gen}.txt",
        fs = lambda wildcards: get_fs_files(checkpoints.get_QTLs.get(pheno=wildcards.pheno, gen=wildcards.gen).output.qtl, wildcards.pheno, wildcards.gen),
        vc = lambda wildcards: get_vc_files(checkpoints.get_QTLs.get(pheno=wildcards.pheno, gen=wildcards.gen).output.qtl, wildcards.pheno, wildcards.gen),
        # resolve_plot_inputs
    output:
        cred = "RESULTS/BFMAP/{pheno}/credsets_{pheno}_{gen}.txt",
        h2 = "RESULTS/BFMAP/{pheno}/h2_{pheno}_{gen}.txt",
        pdf = "PLOTS/BFMAP/{pheno}/{pheno}_{gen}.pdf"
    log: "LOGS/plot/BFMAP/{pheno}_{gen}.log"  
    benchmark: "LOGS/plot/BFMAP/{pheno}_{gen}.bench" 
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *10* 1000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        set +o pipefail
        (Rscript --vanilla {input.script} {input.mlma} {input.genes} {output.cred} {output.h2} {input.fs} {output.pdf}) &> {log} || true
        """



rule VEP_BFMAP:
    input:
        script = "SCRIPTS/VEP.r",
        cred = "RESULTS/BFMAP/{pheno}/credsets_{pheno}_{gen}.txt",
        vcf = "Snakemake_Liftover_Impute/Output/Imputed/bcftools_lifted_imputed_gt_DR2.vcf.gz",
        csi = "Snakemake_Liftover_Impute/Output/Imputed/bcftools_lifted_imputed_gt_DR2.vcf.gz.csi",
    output:
        vep = protected("RESULTS/BFMAP/{pheno}/vep_{pheno}_{gen}.vcf")
    log: "LOGS/BFMAP/vep/{pheno}_{gen}.log"  
    benchmark: "LOGS/BFMAP/vep/{pheno}_{gen}.bench" 
    conda: "vep"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *20* 1000,
        time = lambda wildcards, attempt: int(attempt) *5* 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (Rscript --vanilla {input.script} {input.cred} {input.vcf} {output.vep}) &> {log}
        """


rule plot_BFMAP_gemrich:
    input:
        script = "SCRIPTS/bfmap_gemrich.r",
        cred = "RESULTS/BFMAP/{pheno}/credsets_{pheno}_{gen}.txt",
        vep = "RESULTS/BFMAP/{pheno}/vep_{pheno}_{gen}.vcf",
        gene = "DATA/geno/ensembl_genes_GRCg6a.txt",
        vc = lambda wildcards: get_vc_files(checkpoints.get_QTLs.get(pheno=wildcards.pheno, gen=wildcards.gen).output.qtl, wildcards.pheno, wildcards.gen),
    output:
        cs = "RESULTS/BFMAPrecalc/{pheno}/credsets_{pheno}_{gen}.txt",    
        gp = "RESULTS/BFMAPrecalc/{pheno}/geneprobs_{pheno}_{gen}.txt",    
        erh = "RESULTS/BFMAPrecalc/{pheno}/enrichcat_{pheno}_{gen}.txt",    
        gpori = "RESULTS/BFMAPrecalc/{pheno}/geneprobsori_{pheno}_{gen}.txt",    
        pdf = "PLOTS/BFMAP/{pheno}/recalc_{pheno}_{gen}.pdf"    
    log: "LOGS/plot/BFMAPrecalc/{pheno}_{gen}.log"  
    benchmark: "LOGS/plot/BFMAPrecalc/{pheno}_{gen}.bench" 
    conda: "IMAGE_SCM"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *40* 1000,
        time = lambda wildcards, attempt: int(attempt) *5* 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (Rscript --vanilla {input.script} {input.cred} {input.vep} {input.gene} {output.cs} {output.gp} {output.erh} {output.gpori} {output.pdf}) &> {log}
        """