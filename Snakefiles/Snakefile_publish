rule plot_PCA:
    input:
        script = "SCRIPTS/PCA.r",
        info = "DATA/geno/2024-04-19_IMAGEcomplete_CR_SCM_GGA6_Ref0_Alt1.RData",
        eivec = "RESULTS/PCA/impute/bcftools_lifted_imputed_gt_QC_pruned.eigenvec",
        eival = "RESULTS/PCA/impute/bcftools_lifted_imputed_gt_QC_pruned.eigenval",
    output:
        plot = "PLOTS/PCA/bcf_imputed_IMAGE_PCA.pdf",
    log: "LOGS/plot/PCA_impute.log"  
    benchmark: "LOGS/plot/PCA_impute.bench" 
    conda: "IMAGE_SCM"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *10* 1000,
        time = lambda wildcards, attempt: int(attempt) *3* 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        set +o pipefail
        (Rscript --vanilla {input.script} {input.eivec} {input.eival} {input.info} {output.plot}
        s) &> {log} || true
        """


rule wrplot_overview:
    input:
        rdata = "DATA/geno/2024-04-19_IMAGEcomplete_CR_SCM_GGA6_Ref0_Alt1.RData",
        pheno = "DATA/pheno/Phenotypes_Final.csv",
        script = "SCRIPTS/wrplot_overview.r",
    output:
        tab = "RESULTS/publish/pheno_descriptive.txt",
        p = "PLOTS/supdata/pheno_descriptive.pdf",
        sup1 = "RESULTS/supdata/SupplementaryData1.txt"
    log: "LOGS/plot/overview/pheno_descriptive.log"
    benchmark: "LOGS/plot/overview/pheno_descriptive.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (R < {input.script} --vanilla --args {input.rdata} {input.pheno} {output.tab} {output.p} {output.sup1}) &> {log}
        """
        
phenos = ['EN1','EN2','EN3','EN4','EN5','EN6','EN7','EN8','EN10','EN11','EN12','EN13','BW32','EW30','EW40','EW50','EW70']

rule plot_PhenoCor:
    input:
        pheno = "DATA/pheno/Phenotypes_Final.csv",
        script = "SCRIPTS/plot_PhenoCor.r",
        note = "RESULTS/gcta/bireml/files/gcta-bireml-done.txt",
        h2 = expand("RESULTS/gcta/reml/{pheno}/{gen}.hsq", pheno = phenos, gen = 'all')
    output:
        p = "PLOTS/publish/PhenoCor.png",
    log: "LOGS/plot/publish/PhenoCor.log"
    benchmark: "LOGS/plot/publish/PhenoCor.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    params:
        pathbi = "RESULTS/gcta/bireml/Imputed",
        pathr = "RESULTS/gcta/reml"
    shell:
        """
        (
        Rscript --vanilla {input.script} {input.pheno} {output.p} {params.pathbi} {params.pathr}
        ) &> {log}
        """

rule plot_fig3:
    input:
        script = "SCRIPTS/plot_fig3.r",
        mlma = expand("PLOTS/manplot/mlma/all/{pheno}_all.png", pheno=['EN7','EN8','EN11']),
        fastgwa = expand("PLOTS/manplot/fastGWA/all/{pheno}_all.png", pheno=['EN7','EN8','EN11']),
    output:
        p = "PLOTS/publish/fig3.png"
    log: "LOGS/plot/publish/fig3.log"
    benchmark: "LOGS/plot/publish/fig3.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (
        Rscript --vanilla {input.script} {input.mlma} {input.fastgwa} {output.p}
        ) &> {log}
        """

rule plot_fig4:
    input:
        script = "SCRIPTS/plot_fig4.r",
        mlma = expand("PLOTS/manplot/mlma/all/{pheno}_all.png", pheno=['BW32','EW30']),
        fastgwa = expand("PLOTS/manplot/fastGWA/all/{pheno}_all.png", pheno=['BW32','EW30']),
        cov1 = "PLOTS/manplot/fastGWA_cov/all/BW32covEW30_all.png",
        cov2 = "PLOTS/manplot/fastGWA_cov/all/EW30covBW32_all.png",
    output:
        p = "PLOTS/publish/fig4.png"
    log: "LOGS/plot/publish/fig4.log"
    benchmark: "LOGS/plot/publish/fig4.bench"
    conda: "IMAGE_SCM" #"environments/IMAGE_SCM.yaml"
    threads: 1
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 20000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        (
        Rscript --vanilla {input.script} {input.mlma} {input.fastgwa} {input.cov1} {input.cov2} {output.p}
        ) &> {log}
        """

rule plot_fig5:
    input:
        script = "SCRIPTS/plot_fig5.r",
        plot = "PLOTS/manplot/metaGWAS/ENs_all.png",
    output:
        plot = "PLOTS/publish/fig5.png",
    log:
        "LOGS/plot/publish/fig5.log"
    benchmark:
        "LOGS/plot/publish/fig5.bench"
    threads: 1
    conda: "IMAGE_SCM"
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) * 10 * 1000,
        time = lambda wildcards, attempt: int(attempt) * 60,
        temp = lambda wildcards, attempt: "${TMP_LOCAL}" if int(attempt) == 1 else 'TEMP/'
    shell:
        """
        (
        Rscript --vanilla {input.script} {input.plot} {output.plot}
        ) &> {log}
        """


def collect_all_manplots(wildcards):
    import os
    plots = []
    pheno = wildcards.pheno

    for gen in gens2:
        try:
            array_ckpt = checkpoints.plot_GWAS_array.get(pheno=pheno, gen=gen)
            imp_ckpt = checkpoints.plot_GWAS_impute.get(pheno=pheno, gen=gen)

            plots.append(array_ckpt.output.plot)
            plots.append(imp_ckpt.output.plot)

        except Exception as e:
            # Skips missing combinations silently
            continue

    return plots



# requires manplot from GWAS first
rule plot_manplot_combine:
    input:
        script = "SCRIPTS/plot_combine.r",
        files = collect_all_manplots,
    output:
        p = "PLOTS/manplot/combine/arrimp/{pheno}.png"
    log: "LOGS/plot/manplot/combine/arrimp/{pheno}.log"
    benchmark: "LOGS/plot/manplot/combine/arrimp/{pheno}.bench"
    threads: 1
    conda: "IMAGE_SCM"   
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *20* 1000,
        time = lambda wildcards, attempt: int(attempt) *60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        ( Rscript --vanilla {input.script} {output.p}
        ) &> {log} 
        """ 

def collect_all_manplots_cov(wildcards):
    import os
    plots = []
    pheno = wildcards.pheno
    covt = wildcards.covt

    for gen in gens2:
        try:
            array_ckpt = checkpoints.plot_GWAScov_array.get(pheno=pheno, covt=covt, gen=gen)
            imp_ckpt = checkpoints.plot_GWAScov_impute.get(pheno=pheno, covt=covt, gen=gen)

            plots.append(array_ckpt.output.plot)
            plots.append(imp_ckpt.output.plot)

        except Exception as e:
            # Skips missing combinations silently
            continue

    return plots


rule plot_manplot_combine_cov:
    input:
        script = "SCRIPTS/plot_combine.r",
        files = collect_all_manplots_cov,
    output:
        p = "PLOTS/manplot/combine/arrimp_cov/{pheno}cov{covt}.png"
    log: "LOGS/plot/manplot/combine/arrimp_cov/{pheno}cov{covt}.log"
    benchmark: "LOGS/plot/manplot/combine/arrimp_cov/{pheno}cov{covt}.bench"
    threads: 1
    conda: "IMAGE_SCM"   
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *20* 1000,
        time = lambda wildcards, attempt: int(attempt) *60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        ( Rscript --vanilla {input.script} {output.p}
        ) &> {log} 
        """ 



phenos = ['EN1','EN2','EN3','EN4','EN5','EN6','EN7','EN8','EN10','EN11','EN12','EN13','BW32','EW30','EW40','EW50','EW70']

rule wr_supdata2:
    input:
        script = "SCRIPTS/wr_supdata2.r",
        files = expand("RESULTS/BFMAP/{pheno}/h2_{pheno}_{gen}.txt", pheno=phenos, gen='all')
    output:
        tab = "RESULTS/supdata/SupplementaryData2.txt"
    log: "LOGS/supdata/supdata2.log"
    benchmark: "LOGS/supdata/supdata2.bench"
    threads: 1
    conda: "IMAGE_SCM"   
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *20* 1000,
        time = lambda wildcards, attempt: int(attempt) *60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        ( Rscript --vanilla {input.script} {output.tab} {input.files}
        ) &> {log} 
        """ 

rule wr_supdata3:
    input:
        script = "SCRIPTS/wr_supdata3456.r",
        files = expand("RESULTS/BFMAPrecalc/{pheno}/geneprobsori_{pheno}_{gen}.txt", pheno=phenos, gen='all')
    output:
        ws = "RESULTS/supdata/SupplementaryData3.xlsx"
    log: "LOGS/supdata/supdata3.log"
    benchmark: "LOGS/supdata/supdata3.bench"
    threads: 1
    conda: "IMAGE_SCM"   
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *20* 1000,
        time = lambda wildcards, attempt: int(attempt) *60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        ( Rscript --vanilla {input.script} {output.ws} {input.files}
        ) &> {log} 
        """ 

rule wr_supdata4:
    input:
        script = "SCRIPTS/wr_supdata3456.r",
        files = expand("RESULTS/BFMAPrecalc/{pheno}/enrichcat_{pheno}_{gen}.txt", pheno=phenos, gen='all')
    output:
        ws = "RESULTS/supdata/SupplementaryData4.xlsx"
    log: "LOGS/supdata/supdata4.log"
    benchmark: "LOGS/supdata/supdata4.bench"
    threads: 1
    conda: "IMAGE_SCM"   
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *20* 1000,
        time = lambda wildcards, attempt: int(attempt) *60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        ( Rscript --vanilla {input.script} {output.ws} {input.files}
        ) &> {log} 
        """ 

rule wr_supdata5:
    input:
        script = "SCRIPTS/wr_supdata3456.r",
        files = expand("RESULTS/BFMAPrecalc/{pheno}/credsets_{pheno}_{gen}.txt", pheno=phenos, gen='all')
    output:
        ws = "RESULTS/supdata/SupplementaryData5.xlsx"
    log: "LOGS/supdata/supdata5.log"
    benchmark: "LOGS/supdata/supdata5.bench"
    threads: 1
    conda: "IMAGE_SCM"   
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *20* 1000,
        time = lambda wildcards, attempt: int(attempt) *60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        ( Rscript --vanilla {input.script} {output.ws} {input.files}
        ) &> {log} 
        """ 

rule wr_supdata6:
    input:
        script = "SCRIPTS/wr_supdata3456.r",
        files = expand("RESULTS/BFMAPrecalc/{pheno}/geneprobs_{pheno}_{gen}.txt", pheno=phenos, gen='all')
    output:
        ws = "RESULTS/supdata/SupplementaryData6.xlsx"
    log: "LOGS/supdata/supdata6.log"
    benchmark: "LOGS/supdata/supdata6.bench"
    threads: 1
    conda: "IMAGE_SCM"   
    resources:
        mem_mb = lambda wildcards, attempt: int(attempt) *20* 1000,
        time = lambda wildcards, attempt: int(attempt) *60,
        temp = lambda wildcards,attempt: "${TMP_LOCAL}" if int(attempt)==1 else 'TEMP/'
    shell:
        """
        ( Rscript --vanilla {input.script} {output.ws} {input.files}
        ) &> {log} 
        """ 
